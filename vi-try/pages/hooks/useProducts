import { useState, useEffect } from 'react';

const useProducts = () => {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [priceRange, setPriceRange] = useState([0, 1000]);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortOption, setSortOption] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch products on initial load
  useEffect(() => {
    const fetchProducts = async () => {
      setIsLoading(true);
      try {
        const response = await fetch('/api/product', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        
        if (!response.ok) {
          throw new Error(`Error: ${response.status}`);
        }
        
        const data = await response.json();
        
        const transformedProducts = data.Products.map(product => ({
          _id: product._id,
          url: product.url,
          brand: product.brand,
          design_type: product.design_type,
          cloth_type: product.cloth_type,
          product_name: product.product_name,
          price: parseFloat(product.price.replace(/[^\d.]/g, '')),
          product_id: product.product_id,
          sku: product.sku,
          details: product.details,
          images: product.images,
          created_at: new Date(product.created_at),
        }));
        
        setProducts(transformedProducts);
        setFilteredProducts(transformedProducts);
        
        // Extract unique categories
        const uniqueCategories = [...new Set(transformedProducts.map(p => p.product_name))];
        setCategories(uniqueCategories);
        
        // Find max price for price range
        const maxPrice = Math.max(...transformedProducts.map(p => p.price), 1000);
        setPriceRange([0, maxPrice]);
        
      } catch (error) {
        console.error('Error fetching products:', error);
        setError(error.message);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchProducts();
  }, []);

  // Apply filters: category and price
  useEffect(() => {
    if (products.length === 0) return;
    
    filterAndSortProducts();
  }, [selectedCategory, priceRange, searchTerm, sortOption, products]);

  // Filter and sort products based on all criteria
  const filterAndSortProducts = () => {
    let result = [...products];
    
    // Apply category filter
    if (selectedCategory) {
      result = result.filter(p => p.product_name === selectedCategory);
    }
    
    // Apply price range filter
    result = result.filter(
      p => p.price >= priceRange[0] && p.price <= priceRange[1]
    );
    
    // Apply search filter
    if (searchTerm) {
      result = result.filter(product => 
        product.product_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.design_type.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    // Apply sorting
    if (sortOption === 'priceLowToHigh') {
      result.sort((a, b) => a.price - b.price);
    } else if (sortOption === 'priceHighToLow') {
      result.sort((a, b) => b.price - a.price);
    } else if (sortOption === 'alphabetically') {
      result.sort((a, b) => a.product_name.localeCompare(b.product_name));
    } else if (sortOption === 'newest') {
      result.sort((a, b) => b.created_at - a.created_at);
    }
    
    setFilteredProducts(result);
  };
  
  // Reset all filters
  const resetFilters = () => {
    setSelectedCategory('');
    setSearchTerm('');
    setSortOption('');
    const maxPrice = Math.max(...products.map(p => p.price), 1000);
    setPriceRange([0, maxPrice]);
  };

  return {
    filteredProducts,
    products,
    categories,
    selectedCategory,
    searchTerm,
    sortOption,
    priceRange,
    isLoading,
    error,
    setSearchTerm,
    setSortOption,
    setSelectedCategory,
    setPriceRange,
    resetFilters
  };
};

export default useProducts;